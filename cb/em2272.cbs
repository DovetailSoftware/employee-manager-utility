''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Product        : Employee Manager Form 2272
'
' Series         : First Choice Administration Series(tm)
'
' Name           : fc2272.cbs
'
' Description    : Allows for workgroup record member list to be updated
'
' Author         : First Choice Software, Inc.
'                  4412 Spicewood Springs Road
'                  Suite 701
'                  Austin, TX  78759
'                  (512) 418-2905
'                  EMAIL: support@fchoice.com
'                  www.fchoice.com
'
' Platforms      : This version supports Clarify 4.0 and later
'
' Copyright (C)  1999 First Choice Software, Inc.
' All Rights Reserved.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'   Functional Declarations
'
' Copyright (C) 1999. First Choice Software, Inc. All Rights Reserved
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit
' Global Variables
'
Global locale As String   'global variables

' Form ID's
'
Const FRM_WRKGRP_MAIN%    = 2265
Const MSG_FIRST_EMP_MAN   = CBFirstMessage + 3000
Const MSG_ENA_DEFAULTS    = MSG_FIRST_EMP_MAN + 0 'enable "set default" chkboxes
Const MSG_DISA_DEFAULTS   = MSG_FIRST_EMP_MAN + 1 'disable "set default" chkboxes
Const MSG_DATA_CHANGED    = MSG_FIRST_EMP_MAN + 2 'cobj_recWrkgrpDef data changed
Const MSG_DATA_CLEARED    = MSG_FIRST_EMP_MAN + 3 'disable the replace button on main form

Private mPropagate      as String      'Module Variable to hold config_itm value
Private mAllowSA        as Integer     'Module Variable to hold config_itm value
Private mSA_empl_Objid  as Long        'Module Variable to hold sa's objid

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Declare external functions
'
' Copyright (C) 1999. First Choice Software. All Rights Reserved.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Declare Public Sub get_strings(start_val As Long, _
                               num_strings As Integer, _
                               locale As String, _
                               application As String, _
                               ret_strings As List)
Declare Sub UpdateEmployeeList(rec_workgroup as Record,emp_objid_list as List,UpdateQueues as Boolean)
Declare Sub UpdateEmployee(rec_workgroup as Record,emp_objid as Long)
Declare Function msg_box(the_text As String, the_caption As String, the_type As Integer) As Integer
Declare Sub UpdateEmployeesWorkGroup(work_group as String,emp_objid_list as List)
Declare Public Function get_sprintf(str_num As Long, locale As String, application As String, _
                                    Optional arg1 As Variant, Optional arg2 As Variant, _
                                    Optional arg3 As Variant, Optional arg4 As Variant, _
                                    Optional arg5 As Variant, Optional arg6 As Variant) As String

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Form Load
'
' Copyright (C) 1999. First Choice Software. All Rights Reserved.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Sub Form_Load()
  Dim ret_strings As New List           'list for control strings
  Dim br as New Bulkretrieve            'BR
  Dim TheList as List                   'List 
  Dim recConfig as Record               'Config Item Record
  Dim recUser as Record                 'User Record
  me.dodefault

  get_strings 13944, 20, locale, "", ret_strings
  lbl_filter.caption            = ret_strings.ItemByIndex(0)
  lbl_avail.caption             = ret_strings.ItemByIndex(1)
  lbl_sel.caption               = ret_strings.ItemByIndex(2)
  lbl_last.caption              = ret_strings.ItemByIndex(3)
  lbl_first.caption             = ret_strings.ItemByIndex(4)
  cmdList.caption               = ret_strings.ItemByIndex(5)
  cmdCopy.caption               = ret_strings.ItemByIndex(6)
  cmdRemove.caption             = ret_strings.ItemByIndex(7)

  ddlFilter.enabled = FALSE
  txtLast.enabled = FALSE
  txtFirst.enabled = FALSE
  clb_avail_emp.enabled = FALSE
  clb_sel_emp.enabled = FALSE
  cmdList.enabled = FALSE
  cmdCopy.enabled = FALSE
  cmdRemove.enabled = FALSE
  ddl_new_wg.enabled = FALSE

                                       'Assume we always Ask
 mPropagate = "Ask"
                                       'Assume we always allow "sa"
 mAllowSA = 1

                                       'Get the Config items & put in Module Variable
                                       'Get sa's objid
 br.SimpleQuery 0, "config_itm"
 br.AppendFilter 0, "name", cbEqual, "EM_Propagate"
 br.SimpleQuery 1, "config_itm"
 br.AppendFilter 1, "name", cbEqual, "EM_allow_sa"
 br.SimpleQuery 2, "empl_user"
 br.AppendFilter 2, "login_name", cbEqual, "sa"
 br.RetrieveRecords

 Set TheList = br.GetRecordList(0)
 If TheList.Count > 0 Then
   Set recConfig = TheList.ItemByIndex(0)
   mPropagate = recConfig.GetField("str_value")
 End If

 Set TheList = br.GetRecordList(1)
 If TheList.Count > 0 Then
   Set recConfig = TheList.ItemByIndex(0)
   mAllowSA = recConfig.GetField("i_value")
 End If

 Set TheList = br.GetRecordList(2)
 If TheList.Count > 0 Then
   Set recUser = TheList.ItemByIndex(0)
   mSA_empl_Objid = recUser.GetField("employee")
 End If

End Sub

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Fill the "remove" dropdown list
'
' Copyright (C) 1999. First Choice Software. All Rights Reserved.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Sub fill_rem_ddl()
  Dim i           As Integer            'loop integer
  Dim t_ret       As New BulkRetrieve   'temp bulkretrieve area
  Dim t_list      As List               'temp list for bulkretrieve
  Dim w_list      As New List           'temp list for workgroup names
  Dim t_rec       As Record             'temp record
  
                                        ' Get the current workgroup
                                        ' Find all of the workgroups
  Set t_rec = Cobj_Recwrkgrpdef.contents  
  w_list.ItemType = "string"
  t_ret.SimpleQuery        0, "hgbst_lst"
  t_ret.AppendFilter       0, "title", cbEqual, "WORKGROUP"
  t_ret.TraverseFromParent 1, "hgbst_lst2hgbst_show", 0
  t_ret.TraverseFromParent 2, "hgbst_show2hgbst_elm", 1
  t_ret.AppendSort         2, "title", cbAscending
  t_ret.AppendFilter       2, "state", cbNotEqual, "Inactive"
  t_ret.AppendFilter       2, "title", cbNotEqual, t_rec.GetField("work_group")
  t_ret.RetrieveRecords
  Set t_list = t_ret.GetRecordList(2)
  
                                        ' Add all of the workgroups to the list except
                                        '  for this one (no inactive groups)
                                        ' Put in the DDL
  for i = 0 to t_list.count - 1
    Set t_rec = t_list.ItemByIndex(i)
    w_list.AppendItem t_rec.GetField("title")
  next i
  cobj_lor_new_wg.Fill w_list
End Sub

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' List button
'
' Copyright (C) 1999. First Choice Software. All Rights Reserved.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Sub cmdList_click()
  Dim i        As Integer               'loop integer
  Dim t_rec    As Record                'temp record
  Dim t_ret    As New BulkRetrieve      'temp bulkretrieve area
  Dim t_list   As List                  'temp list for bulkretrieve
  Dim sel_list As List                  'list of selected employees
  Dim ava_list As New List              'list of available employees

  Set sel_list = clb_sel_emp.GetList
  ava_list.ItemType = "record"

  t_ret.SimpleQuery 0, "employee"
  If Len(txtLast.Text) > 0 Then
    Select Case ddlFilter.Value
      Case "Starts with"
        t_ret.AppendFilter 0, "last_name", cbLike, txtLast.Text & "%"
      Case "Ends with"
        t_ret.AppendFilter 0, "last_name", cbLike, "%" & txtLast.Text 
      Case "Contains"
        t_ret.AppendFilter 0, "last_name", cbLike, "%" & txtLast.Text & "%"
    End Select
  End If
  If Len(txtFirst.Text) > 0 Then
    Select Case ddlFilter.Value
      Case "Starts with"
        t_ret.AppendFilter 0, "first_name", cbLike, txtFirst.Text & "%"
      Case "Ends with"
        t_ret.AppendFilter 0, "first_name", cbLike, "%" & txtFirst.Text 
      Case "Contains"
        t_ret.AppendFilter 0, "first_name", cbLike, "%" & txtFirst.Text & "%"
    End Select
  End If
                                       'If the config_itm is set to False (0)
                                       'Exclude "sa" from the list of available employees         
  If mAllowSA = 0 Then
    t_ret.AppendFilter 0, "objid", cbNotEqual, mSA_empl_objid
  End If

  t_ret.RetrieveRecords
  Set t_list = t_ret.GetRecordList(0)

  For i = 0 to t_list.Count - 1
    Set t_rec = t_list.ItemByIndex (i)
    If sel_list.FindFirstIndex(t_rec.GetField("objid"), "objid") < 0 Then
      ava_list.AppendItem t_rec
    End If    
  Next i

  If ava_list.count >= 0 Then
    ava_list.Sort "last_name", 0, "first_name"
    cobj_LOR_avail_emp.fill ava_list                    'fill clb with list of records
  End If

End Sub

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Copy button
'
' Copyright (C) 1999. First Choice Software. All Rights Reserved.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Sub cmdCopy_click()
  Dim i        As Integer               'loop integer
  Dim n_dex    As Integer               'list index
  Dim t_rec    As Record                'temp record
  Dim a_list   As New List              'list of available employees
  Dim t_list   As List                  'list of employees to move
  Dim SelectedEmployeesList as List     'List of selected employee records
  Dim emp_objid_list as New List        'List of employee objids
  Dim rec_workgroup as Record           'WorkGroup Record
  Dim work_group as String              'Workgroup name
  Dim retVal as Integer                 'result of prompt
  Dim ret_int as Long

  Set t_list = clb_avail_emp.SelectedIndexes
  If t_list.Count = 0 Then Exit Sub
  Set a_list = clb_avail_emp.GetList
  For i = 0 to t_list.Count - 1
    n_dex = t_list.ItemByIndex(i)
    Set t_rec = a_list.ItemByIndex (n_dex)
    clb_sel_emp.AppendItem t_rec
  Next i

                                       'Build a list of employee objids for the selected records
  Set SelectedEmployeesList = a_list.ListByIndex(t_list)
  emp_objid_list.ItemType = "long"
  SelectedEmployeesList.ExtractList emp_objid_list, "objid"

  t_list.sort "", 1
  For i = 0 to t_list.Count - 1
    n_dex = t_list.ItemByIndex(i)
    a_list.RemoveByIndex n_dex
  Next i
  a_list.Sort "last_name", 0, "first_name"
  cobj_LOR_avail_emp.fill a_list
  clb_avail_emp.Unselect
  clb_sel_emp.Unselect

                                       'Get the work_group record & name
  Set rec_workgroup = Cobj_recWrkgrpDef.Contents
  work_group = rec_workgroup.GetField("work_group")

                                       'See if we should propagate the attributes to 
                                       'the selected employees (based on config_itm)

  Select Case Ucase(mPropagate)
  Case "ASK"
                                       'Ask the User if they want to propagate attributes
                                       'If Yes - Update all attributes for selected employees
                                       'If no, only update the work_group
        retVal = msg_box(get_sprintf(13997, locale, ""),get_sprintf(13991, locale, ""),4)
        If retVal = 2 Then ' Yes
          Call UpdateEmployeeList(rec_workgroup,emp_objid_list,True)
        Else
    	     ret_int = App.CallCB("UpdateEmployeesWorkGroup work_group,emp_objid_list")
        	 If ret_int <> 0 Then
     	  	   App.MsgBox "An unexpected error occured. Return Code = " + CStr(ret_int)
		         Exit Sub
	         End If
        End If
  Case "ALWAYS"
                                       'Update all the attributes for all selected employees
        Call UpdateEmployeeList(rec_workgroup,emp_objid_list,True)
  Case "NEVER"
                                       'Just update the work_group but not the attributes
 	     ret_int = App.CallCB("UpdateEmployeesWorkGroup work_group,emp_objid_list")
     	 If ret_int <> 0 Then
 	  	   App.MsgBox "An unexpected error occured. Return Code = " + CStr(ret_int)
         Exit Sub
       End If
  Case Else
     'Do Nothing
  End Select


End Sub

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Remove button
'
' Copyright (C) 1999. First Choice Software. All Rights Reserved.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Sub cmdRemove_click()
  Dim t_list As List                   'list of employees to remove
  Dim br as New BulkRetrieve            'Structure to get work_group record
  Dim TheList as List                   'List of records
  Dim work_group as String              'work_group name
  Dim rec_workgroup as Record           'work_group record
  Dim SelectedEmployeesList as List     'List of selected employee records
  Dim emp_objid_list as New List        'List of employee objids
  Dim retVal as Integer                 'result of prompt
  Dim bWorkGroupDefined as Boolean      'Indicates if the workgroup name has been created as a table_workgroup record
  Dim AvailEmployees as List
  Dim SelectedEmployees as List
  Dim counter as Integer
  Dim ret_int as Long
                                       'Get the List of selected indexes
                                       'Get the List of available employees
                                       'Get the List of selected employees
  Set t_list = clb_sel_emp.SelectedIndexes
  Set AvailEmployees = Cobj_LOR_avail_emp.Contents
  Set SelectedEmployees = Cobj_LOR_sel_emp.Contents

                                       'Get the List of Selected Employees 
                                       'Build a list of employee objids for the selected records
  Set SelectedEmployeesList = clb_sel_emp.SelectedList
  emp_objid_list.ItemType = "long"
  SelectedEmployeesList.ExtractList emp_objid_list, "objid"

                                       'Remove the Selected Employees from the Selected Grid
  SelectedEmployees.RemoveByIndex t_list
                                       'Add the Selected Employees to the Available Grid
                                       'I know this seems like a weird way of doing it, but
                                       'every other way seemed to cause GFPs
  Dim ava_list as List
  Dim sel_list as List
  Set sel_list = SelectedEmployeesList
  Set ava_list = clb_avail_emp.GetList
  Dim t_rec as Record
  Dim i as Integer

  For i = 0 to sel_list.Count - 1
    Set t_rec = sel_list.ItemByIndex (i)
    clb_avail_emp.AppendItem t_rec
  Next i
   
                                       'Unselect items from the grid
                                       'Fill the Cobjs & Refresh
  clb_avail_emp.Unselect
  Cobj_LOR_sel_emp.Fill SelectedEmployees, cbFillintoList
  Cobj_LOR_sel_emp.Refresh
  clb_sel_emp.Unselect

                                       'Do some cleanup
  Set SelectedEmployeesList = Nothing
  Set AvailEmployees = Nothing
  Set t_list = Nothing
  Set SelectedEmployees = Nothing

                                       'Get the new work_group name
  work_group = Trim(Cobj_los_new_wg.Contents)

                                       'Get the workgroup Record
                                       'There may not be one - so set the flag appropriately
  br.SimpleQuery 0, "workgroup"
  br.AppendFilter 0, "work_group", cbEqual, work_group
  br.RetrieveRecords
  Set TheList = br.GetRecordList(0)
  If TheList.Count > 0 Then
    Set rec_workgroup = TheList.ItemByIndex(0)
    bWorkGroupDefined = TRUE
  Else
    bWorkGroupDefined = FALSE
  End If

                                       'If there's not a record in the workgroup table
                                       'Simply update the work_group value on the
                                       'employee records & exit
  If bWorkGroupdefined = FALSE Then
     ret_int = App.CallCB("UpdateEmployeesWorkGroup work_group,emp_objid_list")
   	 If ret_int <> 0 Then
   	   App.MsgBox "An unexpected error occured. Return Code = " + CStr(ret_int)
       Exit Sub
     End If
    'Call UpdateEmployeesWorkGroup(work_group,emp_objid_list)
    Set emp_objid_list = Nothing
    Exit Sub
  End If

                                       'If we're still here, then there must be a workgroup record
                                       'See if we should propagate the attributes to 
                                       'the selected employees (based on config_itm)
  Select Case Ucase(mPropagate)
  Case "ASK"
                                       'Ask the User if they want to propagate attributes
                                       'If Yes - Update all attributes for selected employees
                                       'If no, only update the work_group
        retVal = msg_box(get_sprintf(13997, locale, ""),get_sprintf(13991, locale, ""),4)
        If retVal = 2 Then ' Yes
          Call UpdateEmployeeList(rec_workgroup,emp_objid_list,True)
        Else
    	     ret_int = App.CallCB("UpdateEmployeesWorkGroup work_group,emp_objid_list")
        	 If ret_int <> 0 Then
     	  	   App.MsgBox "An unexpected error occured. Return Code = " + CStr(ret_int)
		         Exit Sub
	         End If
          'Call UpdateEmployeesWorkGroup(work_group,emp_objid_list)
        End If
  Case "ALWAYS"
                                       'Update all the attributes for all selected employees
        Call UpdateEmployeeList(rec_workgroup,emp_objid_list,True)
  Case "NEVER"
                                       'Just update the work_group but not the attributes
     ret_int = App.CallCB("UpdateEmployeesWorkGroup work_group,emp_objid_list")
   	 If ret_int <> 0 Then
   	   App.MsgBox "An unexpected error occured. Return Code = " + CStr(ret_int)
       Exit Sub
     End If
    'Call UpdateEmployeesWorkGroup(work_group,emp_objid_list)
  Case Else
     'Do Nothing
  End Select

    Set emp_objid_list = Nothing
End Sub


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Message Handler
'
' Copyright (C) 1999. First Choice Software. All Rights Reserved.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Sub Message(ByVal msgNum as Long, ByVal msgStr as String)
  Select Case msgNum
    Case MSG_ENA_DEFAULTS
      ddlFilter.enabled = TRUE
      ddl_new_wg.enabled = TRUE
      txtLast.enabled = TRUE
      txtFirst.enabled = TRUE
      clb_avail_emp.enabled = TRUE
      clb_sel_emp.enabled = TRUE
      cmdList.enabled = TRUE
      cmdCopy.enabled = TRUE
      cmdRemove.enabled = TRUE
      ddl_new_wg.enabled = TRUE
      clb_avail_emp.UnSelect
      clb_sel_emp.UnSelect
                    ' since we only enable defaults 
                    ' when initializing data,
                    ' disable the 'Replace'
                    ' button (it is used as a data dirty
                    ' indicator)
      fill_rem_ddl
      Me.NotifyByID FRM_WRKGRP_MAIN, MSG_DATA_CLEARED, ""
    Case MSG_DISA_DEFAULTS
      ddlFilter.enabled = FALSE
      ddl_new_wg.enabled = FALSE
      txtLast.enabled = FALSE
      txtFirst.enabled = FALSE
      clb_avail_emp.enabled = FALSE
      clb_sel_emp.enabled = FALSE
      cmdList.enabled = FALSE
      cmdCopy.enabled = FALSE
      cmdRemove.enabled = FALSE
      clb_avail_emp.UnSelect
      clb_sel_emp.UnSelect
      ddl_new_wg.enabled = FALSE
                    ' disable the replace button
      Me.NotifyByID FRM_WRKGRP_MAIN, MSG_DATA_CLEARED, ""
    Case Else
      Me.DoDefault
  End Select
End Sub 